#+Title: Setting Up Bridge Network
#+Author:vlead
#+Date: 15 April 2015

* Introduction
This document details the setting up of a bridge network on base
machine. The bridge network consists of router, two bridges and test
machines as basic components. The document further explains the step
by step creation of this network.

Seen below is the diagram of bridged network along with its
components.

[[./bridged-network-diagram.png]]

*Edit:* The diagram can be edited [[https://docs.google.com/a/vlabs.ac.in/drawings/d/1OAgPRCly6_JsTckBBHIP0djqaORDGobUEQfvMJVHJ5s/edit][here]]


* Setting Up a Bridge Network
Setting up the bridged network involves following steps:

|--------+---------------------------------------|
| *Step* | *Description*                         |
|--------+---------------------------------------|
|     01 | Connecting LAN Interface and Bridge   |
|--------+---------------------------------------|
|     02 | Setting up Bridge for Private Network |
|--------+---------------------------------------|
|     03 | Creating Router                       |
|--------+---------------------------------------|
|     04 | Configuring Router                    |
|--------+---------------------------------------|
|     05 | Creating Private Subnet               |
|--------+---------------------------------------|
|     06 | Connecting to Internet                |
|--------+---------------------------------------|

** Step 01: Connecting LAN Interface and Bridge 
It is essential to know the name of the LAN interface to make a
connection to the bridge. If not known, it can be identified by
issuing the command:
#+begin_src example
ifconfig -a
#+end_src
The interface name will be the one associated with the ip address. In
most cases it is the *eth0* interface.

Our first task is to create a bridge, let us call it *br0* and connect
it to *eth0* interface. Bridge is basically a file configured with
essential settings which mentions the bridge name, boot protocol, on
boot settings, type and if it is to be network manager
controlled. Move to the *network-scripts* directory in
*/etc/sysconfig* by following command:
#+begin_src example
cd /etc/sysconfig/network-scripts/
#+end_src

and create a file with name *ifcfg-br0* and write the following
settings:
#+begin_src example
DEVICE=br0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Bridge
NM_CONTROLLED=no
#+end_src

The *eth0* interface needs to be made aware of bridge created.  In the
current directory, the contents of the file *ifcfg-eth0* needs to be
set to following:
#+begin_src example
DEVICE=eth0
HWADDR=<<Hardware Address of eth0 interface>>
TYPE=Ethernet
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=none
BRIDGE=br0
#+end_src

Restart network service to check whether eth0 is connected to br0
#+begin_src example
/etc/init.d/network restart
or 
service network restart
#+end_src

** Step 02: Setting Up Bridge for Private Network 
We next set up a bridge in our private network. Let us call it as
*br1*. To create the bridge, create a file with name *ifcfg-br1* in
the current directory including the following settings:
#+begin_src example
DEVICE=br1
TYPE=Bridge
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=none
#+end_src

Restart network service to effect the changes.
#+begin_src example
service network restrat
#+end_src

Following command can be issued to list all the bridges created and
the interfaces they are connected to.
#+begin_src example
brctl show
#+end_src
The output has to contain the two created bridges and any other
bridges previously created with connected interfaces.

With current configuration used, a sample output can be seen below:
#+begin_src example
bridge name	bridge id		STP enabled	interfaces
br0		8000.5cf9dd75d1f8	no		eth0
br1		8000.000000000000	no		
#+end_src

** Step 03: Creating Router
We next move ahead in creation of a router. Create a router (aka
container) with following settings:
#+begin_src example
vzctl create <Router-CT-ID> --ostemplate centos-6-x86_64 --hostname <host-name>
#+end_src
Note that *ip address* is not set for the router while creating the
container.

set the *netfilter* to full for the container.
#+begin_src example
vzctl set <Router-CT-ID> --netfilter full --save
#+end_src

The router needs to be connected to the two bridges *br0* and *br1*
and this is achieved by connecting with the respective
interfaces. This is done by the following commands:
#+begin_src example
vzctl set <Router-CT-ID> --netif_add eth0,,,,br0 --save
vzctl set <Router-CT-ID> --netif_add eth1,,,,br1 --save
#+end_src

Start the container and set its status to running.
#+begin_src example
vzctl start <Router-CT-ID>
#+end_src

** Step 04: Configuring Router
Enter the router contianer
#+begin_src example
vzctl enter <Router-CT-ID>
#+end_src

*eth0* and *eth1* interfaces of the router needs to be configured to
connect to the bridges. The configuration can set in the directory
*network-scripts* for the files *ifcfg-eth0* and *ifcfg-eth1*.
#+begin_src example
cd /etc/sysconfig/network-scripts
#+end_src

*ifcfg-eth0* file should contain the following settings:
#+begin_src example
DEVICE=eth0
HWADDR=<<Hardware address of eth0 interface>>
ONBOOT=yes
BOOTPROTO=dhcp
NM_CONTROLLED=no
#+end_src
Restart the network service and check if the eth0 is assigned to
ip-address or not (ifconfig command).

*ifcfg-eth1* file should contain the following settings:
#+begin_src example
DEVICE=eth1
HWADDR=<<Hardware address of eth1 interface>>
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=<<IP address of container>>
NETMASK=<<IP address of netmask>>
#+end_src
Restart the network service and check if the eth1 is assigned to
ip-address or not (ifconfig command)

The hardware address can be known by the command *ifconfig -a*.

*Note:* Hardware address will be *only* available after adding the
configuration files. The process is to first add the configuration
without the hardware address, restart the service and later update it.

Logout from the container by issuing the command:
#+begin_src example
logout
#+end_src

** Step 05: Creating private subnet
To test the settings we can create our own private subnet with two
test containers.

#+begin_src example
vzctl create <Test1-CT-ID> --ostemplate centos-6-x86_64 --hostname <host-name>
vzctl create <Test2-CT-ID> --ostemplate centos-6-x86_64 --hostname <host-name>
#+end_src

set the *netfilter* to *full* for both the containers by the following
command:
#+begin_src example
vzctl set <Test1-CT-ID> --netfilter full --save
vzctl set <Test2-CT-ID> --netfilter full --save
#+end_src

start the two continers
#+begin_src example
vzctl start <Test1-CT-ID>
vzctl start <test2-CT-ID>
#+end_src

The interface of both continers need to be configured by connecting
them to the private bridge *br1*. 
#+begin_src example
vzctl set <Test1-CT-ID> --netif_add eth1,,,,br1 --save
vzctl set <Test1-CT-ID> --netif_add eth1,,,,br1 --save
#+end_src

The *ifcfg-eth1* file present in */etc/sysconfig/network-script*
directory for the both the containers need to be configured with
following settings:
#+begin_src example
DEVICE=eth1
HWADDR=<<Hardware address of eth1>>
BOOTPROTO=static
ONBOOT=yes
NM_CONTROLLED=no
IPADDR=<<IP address of container>>
NETMASK=<<IP address of netmask>>
GATEWAY=<<IP address of gateway>>
#+end_src
** Step 06: Connecting to Internet
Login inside the router and set the ipv4 forwarding to true.
#+begin_src example
vzctl enter <Router-CT-ID>
vi /etc/sysctl.conf
#+end_src  
and set the parameter
#+begin_src example
net.ipv4.ip_forward = 1
#+end_src

Next task is to update the iptable rules in the router.
following is the settings to be added in */etc/sysconfig/iptables*
#+begin_src example
*nat
:PREROUTING ACCEPT [10504:1135410]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A POSTROUTING -o eth0 -j MASQUERADE 
COMMIT
#+end_src
The bridged network is now ready.

